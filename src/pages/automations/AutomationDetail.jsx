import React, { useEffect, useState, useCallback, useRef } from 'react';
import { useParams, Link } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';
import axios from 'axios';
import { apiUrl } from '@/lib/utils';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import Packery from 'packery';
import { Loader2, ArrowLeft, Download } from 'lucide-react';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

/*
 * We render absolute-positioned blocks respecting exact coordinates generated by optimizer.
 * Packery is used only as a graceful fallback/reflow if overlaps occur (should not normally).
 */
const AutomationDetail = () => {
  const { id } = useParams();
  const { token } = useAuth();
  const { toast } = useToast();
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const containerRef = useRef(null);
  const packeryRef = useRef(null);
  const sheetRef = useRef(null);

  const load = useCallback(async () => {
    try {
      setLoading(true);
      const res = await axios.get(`${apiUrl}/api/v1/automate/${id}`, { headers: { Authorization: `Bearer ${token}` } });
      if (res.data.success) setData(res.data.data); else throw new Error(res.data.message);
    } catch (err) {
      toast({ title: 'Error', description: err.message || 'Failed to load automation', variant: 'destructive' });
    } finally { setLoading(false); }
  }, [token, id, toast]);

  useEffect(() => { load(); }, [load]);

  useEffect(() => {
    if (containerRef.current && data?.automationData?.optimizedLayout?.placedItems) {
      // Initialize packery only once; layout items already positioned
      packeryRef.current = new Packery(containerRef.current, {
        itemSelector: '.layout-item',
        initLayout: false,
        resize: true
      });
    }
  }, [data]);

  if (loading) {
    return <div className='p-8 flex items-center gap-2 text-sm text-gray-600'><Loader2 className='h-4 w-4 animate-spin' /> Loading automation...</div>
  }
  if (!data) return <div className='p-8 text-sm text-gray-600'>Not found</div>;

  const layout = data.automationData?.optimizedLayout;
  const sheets = layout?.sheets && layout.sheets.length > 0 ? layout.sheets : [
    {
      index: 1,
      sheetDetails: layout?.sheetDetails || { sheetWidth: 0, sheetHeight: 0 },
      placedItems: layout?.placedItems || [],
      efficiency: layout?.efficiency || 0,
      unusedArea: layout?.unusedArea || 0,
    }
  ];
  const sheetWidth = sheets[0]?.sheetDetails?.sheetWidth || 0;
  const sheetHeight = sheets[0]?.sheetDetails?.sheetHeight || 0;
  const fileUrlMap = (data?.automationData?.orderForResponse || []).reduce((acc, cur) => { acc[cur.orderId] = cur.fileUrl; return acc; }, {});

  // Compute scale to fit into viewport width (max 1000px area) while preserving aspect ratio

  const handleDownloadPdf = async () => {
    try {
      const sheetEl = sheetRef.current;
      if (!sheetEl) return;
      // Ensure all images inside sheet are loaded to avoid blanks
      const imgs = Array.from(sheetEl.querySelectorAll('img'));
      // For CORS-safe canvas: swap image src to proxy endpoints temporarily
      const originalSrcMap = new Map();
      imgs.forEach(img => {
        originalSrcMap.set(img, img.src);
        const proxied = `${apiUrl}/api/v1/images/proxy?url=${encodeURIComponent(img.getAttribute('data-original-src') || img.src)}`;
        img.crossOrigin = 'anonymous';
        img.referrerPolicy = 'no-referrer';
        img.src = proxied;
      });

      await Promise.all(imgs.map(img => img.complete ? Promise.resolve() : new Promise((res) => {
        img.onload = () => res();
        img.onerror = () => res();
      })));
      // Create a high-resolution canvas from the sheet container
      const scaleFactor = window.devicePixelRatio || 2;
      const canvas = await html2canvas(sheetEl, {
        backgroundColor: '#ffffff',
        scale: scaleFactor,
        useCORS: true,
        allowTaint: false,
        imageTimeout: 15000,
        logging: false,
        windowWidth: sheetEl.scrollWidth,
        windowHeight: sheetEl.scrollHeight
      });

      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF({ orientation: sheetWidth >= sheetHeight ? 'l' : 'p', unit: 'pt', format: 'a4' });
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();

      // Scale image to fit within page margins while preserving aspect ratio
      const margin = 24; // 24pt margins
      const maxW = pageWidth - margin * 2;
      const maxH = pageHeight - margin * 2;
      const imgW = canvas.width;
      const imgH = canvas.height;
      const ratio = Math.min(maxW / imgW, maxH / imgH);
      const renderW = imgW * ratio;
      const renderH = imgH * ratio;
      const offsetX = (pageWidth - renderW) / 2;
      const offsetY = (pageHeight - renderH) / 2;

      pdf.addImage(imgData, 'PNG', offsetX, offsetY, renderW, renderH, undefined, 'FAST');
      pdf.save(`automation-${id}.pdf`);
      // Restore original image src to avoid any flicker/issues after export
      originalSrcMap.forEach((src, img) => {
        img.src = src;
      });
    } catch (e) {
      toast({ title: 'Export failed', description: e.message || 'Could not generate PDF', variant: 'destructive' });
    }
  };

  return (
    <div className='p-6 max-w-7xl mx-auto space-y-6'>
      <div className='flex items-center justify-between'>
        <div>
          <h1 className='text-2xl font-bold text-gray-900'>Automation Layout</h1>
          <p className='text-gray-600 text-sm mt-1'>Algorithm: <span className='font-medium'>{data.automationData?.type}</span> • Sheets: {layout?.sheetCount || sheets.length} • Overall Efficiency: {layout?.efficiency?.toFixed(2)}%</p>
        </div>
        <div className='flex gap-2'>
          <Button asChild variant='outline'><Link to='/automations'><ArrowLeft className='h-4 w-4 mr-1' />Back</Link></Button>
          <Button variant='default' className='bg-gray-900 text-white hover:bg-gray-800' onClick={handleDownloadPdf}>
            <Download className='h-4 w-4 mr-1' /> Download PDF
          </Button>
        </div>
      </div>

      {sheets.map((sheet) => {
        const sWidth = sheet.sheetDetails?.sheetWidth || 0;
        const sHeight = sheet.sheetDetails?.sheetHeight || 0;
        const sScale = sWidth ? Math.min(1, 1000 / sWidth) : 1;
        return (
          <Card key={sheet.index} className='mb-6'>
            <CardHeader className='py-4'>
              <CardTitle className='text-sm font-semibold'>Sheet {sheet.index} ({sWidth} x {sHeight}) • Efficiency {sheet.efficiency?.toFixed(2)}% • scale {sScale.toFixed(2)}</CardTitle>
            </CardHeader>
            <CardContent>
              <div className='overflow-auto border rounded bg-neutral-50 p-4'>
                <div
                  className='relative bg-white shadow-inner mx-auto'
                  style={{ width: sWidth * sScale, height: sHeight * sScale, backgroundSize: '20px 20px', backgroundImage: 'linear-gradient(to right,#f5f5f5 1px,transparent 1px),linear-gradient(to bottom,#f5f5f5 1px,transparent 1px)' }}
                >
                  <div style={{ position: 'relative', width: '100%', height: '100%' }}>
                    {sheet.placedItems.map((item, i) => {
                      const left = (item.x) * sScale;
                      const top = (item.y) * sScale;
                      const w = (item.actualWidth) * sScale;
                      const h = (item.actualHeight) * sScale;
                      const imgUrl = fileUrlMap[item.orderId];
                      return (
                        <div
                          key={i}
                          className='layout-item absolute rounded-sm border border-gray-700/60 bg-white shadow overflow-hidden group'
                          style={{ left, top, width: w, height: h }}
                          title={`Order ${item.orderId} (${item.actualWidth}x${item.actualHeight}) pos(${item.x},${item.y}) rot:${item.rotation}`}
                        >
                          {imgUrl ? (
                            <img
                              src={imgUrl}
                              data-original-src={imgUrl}
                              alt={item.orderId}
                              className='w-full h-full object-contain transition-transform duration-300'
                              style={{ transform: item.rotation ? `rotate(${item.rotation}deg)` : 'none' }}
                              draggable={false}
                            />
                          ) : (
                            <div className='h-full w-full bg-gradient-to-br from-gray-200 to-gray-100 flex flex-col text-[10px] p-1'>
                              <div className='font-mono truncate'>#{item.orderId?.slice(-6)}</div>
                              <div className='text-[9px] text-gray-600 mt-auto'>{item.actualWidth}x{item.actualHeight}</div>
                              {item.rotation ? <div className='text-[9px] text-blue-600'>rot {item.rotation}°</div> : null}
                            </div>
                          )}
                          <div className='absolute inset-x-0 bottom-0 bg-black/60 text-[9px] text-white px-1 py-0.5 opacity-0 group-hover:opacity-100 transition-opacity'>
                            #{item.orderId?.slice(-6)} • {item.actualWidth}x{item.actualHeight}{item.rotation ? ` • rot ${item.rotation}` : ''}
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        );
      })}

      <Card>
        <CardHeader className='py-3'>
          <CardTitle className='text-sm'>Raw Data</CardTitle>
        </CardHeader>
        <CardContent>
          <pre className='text-[11px] bg-black/90 text-green-300 p-4 rounded overflow-auto max-h-96'>{JSON.stringify(layout, null, 2)}</pre>
        </CardContent>
      </Card>

      {(layout?.unplaced || []).length > 0 && (
        <Card>
          <CardHeader className='py-3'>
            <CardTitle className='text-sm text-red-600'>Unplaced items</CardTitle>
          </CardHeader>
          <CardContent>
            <div className='text-xs text-gray-700'>The following items could not be placed:</div>
            <ul className='mt-2 space-y-1 text-xs'>
              {layout.unplaced.map((u, idx) => (
                <li key={idx} className='flex items-center justify-between border-b py-1'>
                  <span className='font-mono'>#{u.orderId?.slice?.(-6) || u.orderId}</span>
                  <span>{u.width}x{u.height}</span>
                  <span>qty {u.quantity}</span>
                  <span className='text-red-600'>{u.reason}</span>
                </li>
              ))}
            </ul>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default AutomationDetail;