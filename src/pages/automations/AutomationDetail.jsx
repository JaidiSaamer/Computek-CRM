import React, { useEffect, useState, useCallback, useRef } from 'react';
import { useParams, Link } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';
import axios from 'axios';
import { apiUrl } from '@/lib/utils';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import Packery from 'packery';
import { Loader2, ArrowLeft } from 'lucide-react';

/*
 * We render absolute-positioned blocks respecting exact coordinates generated by optimizer.
 * Packery is used only as a graceful fallback/reflow if overlaps occur (should not normally).
 */
const AutomationDetail = () => {
  const { id } = useParams();
  const { token } = useAuth();
  const { toast } = useToast();
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const containerRef = useRef(null);
  const packeryRef = useRef(null);

  const load = useCallback(async () => {
    try {
      setLoading(true);
      const res = await axios.get(`${apiUrl}/api/v1/automate/${id}`, { headers: { Authorization: `Bearer ${token}` } });
      if (res.data.success) setData(res.data.data); else throw new Error(res.data.message);
    } catch (err) {
      toast({ title: 'Error', description: err.message || 'Failed to load automation', variant: 'destructive' });
    } finally { setLoading(false); }
  }, [token, id, toast]);

  useEffect(() => { load(); }, [load]);

  useEffect(() => {
    if (containerRef.current && data?.automationData?.optimizedLayout?.placedItems) {
      // Initialize packery only once; layout items already positioned
      packeryRef.current = new Packery(containerRef.current, {
        itemSelector: '.layout-item',
        initLayout: false,
        resize: true
      });
    }
  }, [data]);

  if (loading) {
    return <div className='p-8 flex items-center gap-2 text-sm text-gray-600'><Loader2 className='h-4 w-4 animate-spin' /> Loading automation...</div>
  }
  if (!data) return <div className='p-8 text-sm text-gray-600'>Not found</div>;

  const layout = data.automationData?.optimizedLayout;
  const sheetWidth = layout?.sheetDetails?.sheetWidth || 0;
  const sheetHeight = layout?.sheetDetails?.sheetHeight || 0;
  const items = layout?.placedItems || [];
  const fileUrlMap = (data?.automationData?.orderForResponse || []).reduce((acc, cur) => { acc[cur.orderId] = cur.fileUrl; return acc; }, {});

  // Compute scale to fit into viewport width (max 1000px area) while preserving aspect ratio
  const maxRenderWidth = 1000;
  const scale = sheetWidth ? Math.min(1, maxRenderWidth / sheetWidth) : 1;

  return (
    <div className='p-6 max-w-7xl mx-auto space-y-6'>
      <div className='flex items-center justify-between'>
        <div>
          <h1 className='text-2xl font-bold text-gray-900'>Automation Layout</h1>
          <p className='text-gray-600 text-sm mt-1'>Algorithm: <span className='font-medium'>{data.automationData?.type}</span> • Efficiency: {layout?.efficiency?.toFixed(2)}% • Items: {items.length}</p>
        </div>
        <div className='flex gap-2'>
          <Button asChild variant='outline'><Link to='/automations'><ArrowLeft className='h-4 w-4 mr-1' />Back</Link></Button>
        </div>
      </div>

      <Card>
        <CardHeader className='py-4'>
          <CardTitle className='text-sm font-semibold'>Sheet Preview ({sheetWidth} x {sheetHeight}) scale {scale.toFixed(2)}</CardTitle>
        </CardHeader>
        <CardContent>
          <div className='overflow-auto border rounded bg-neutral-50 p-4'>
            <div
              ref={containerRef}
              className='relative bg-white shadow-inner mx-auto'
              style={{ width: sheetWidth * scale, height: sheetHeight * scale, backgroundSize: '20px 20px', backgroundImage: 'linear-gradient(to right,#f5f5f5 1px,transparent 1px),linear-gradient(to bottom,#f5f5f5 1px,transparent 1px)' }}
            >
              {items.map((item, i) => {
                const left = (item.x) * scale;
                const top = (item.y) * scale;
                const w = (item.actualWidth) * scale;
                const h = (item.actualHeight) * scale;
                const imgUrl = fileUrlMap[item.orderId];
                return (
                  <div
                    key={i}
                    className='layout-item absolute rounded-sm border border-gray-700/60 bg-white shadow overflow-hidden group'
                    style={{ left, top, width: w, height: h }}
                    title={`Order ${item.orderId} (${item.actualWidth}x{item.actualHeight}) pos(${item.x},${item.y}) rot:${item.rotation}`}
                  >
                    {imgUrl ? (
                      <img
                        src={imgUrl}
                        alt={item.orderId}
                        className='w-full h-full object-contain transition-transform duration-300'
                        style={{ transform: item.rotation ? `rotate(${item.rotation}deg)` : 'none' }}
                        draggable={false}
                      />
                    ) : (
                      <div className='h-full w-full bg-gradient-to-br from-gray-200 to-gray-100 flex flex-col text-[10px] p-1'>
                        <div className='font-mono truncate'>#{item.orderId?.slice(-6)}</div>
                        <div className='text-[9px] text-gray-600 mt-auto'>{item.actualWidth}x{item.actualHeight}</div>
                        {item.rotation ? <div className='text-[9px] text-blue-600'>rot {item.rotation}°</div> : null}
                      </div>
                    )}
                    <div className='absolute inset-x-0 bottom-0 bg-black/60 text-[9px] text-white px-1 py-0.5 opacity-0 group-hover:opacity-100 transition-opacity'>
                      #{item.orderId?.slice(-6)} • {item.actualWidth}x{item.actualHeight}{item.rotation ? ` • rot ${item.rotation}` : ''}
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader className='py-3'>
          <CardTitle className='text-sm'>Raw Data</CardTitle>
        </CardHeader>
        <CardContent>
          <pre className='text-[11px] bg-black/90 text-green-300 p-4 rounded overflow-auto max-h-96'>{JSON.stringify(layout, null, 2)}</pre>
        </CardContent>
      </Card>
    </div>
  );
};

export default AutomationDetail;